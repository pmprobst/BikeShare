})))
all_results <- rbind(all_results,
new_results,
'BART_ps' = setNames(summary(bart_ps)$estimates[c('estimate',
'ci.lower',
'ci.upper')],
colnames(all_results)),
'benchmark' =c('Est' =1794,
'Conf.L' = 512,
'Conf.H' = 3146))
all_results$method <- rownames(all_results)
all_results$type <- 'both'
all_results$type[all_results$method %in% c('regression',
'BART')] <- 'outcome_model'
all_results$type[all_results$method %in% c('stratification',
'matching',
'IPW',
'EBal')] <- 'treatment_model'
all_results$type[all_results$method == 'benchmark'] <- 'benchmark'
all_results$type <- factor(all_results$type,
levels = c('outcome_model',
'treatment_model',
'both',
'benchmark'))
all_results$method <- factor(all_results$method,
levels = unique(all_results$method))
all_results |>
ggplot(aes(y = Est, x = method, color = type)) +
geom_errorbar(aes(ymin = Conf.L, ymax = Conf.H)) +
geom_point() +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
library(EValue)
library(EValue)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
library(EValue)
evalues.RR(est = 10.73, lo = 8.02, hi = 14.36)
bias_plot(10.73, xmax = 40)
bias_plot(8.02, xmax = 40)
# summary() used to print the E-value only
summary(evalues.RR(est = 2.5, true = 1.5))
evalues.RR(est = 3.9, lo = 1.8, hi = 8.7)
bias_plot(3.9, xmax = 20)
evalues.RR(est = 0.80, lo = 0.71, hi = 0.91)
evalues.HR(est = 2.54, lo = 1.24, hi = 5.20, rare = TRUE)
evalues.HR(est = 1.09, lo = 1.06, hi = 1.13)
evalues.HR(est = 1.09, lo = 1.06, hi = 1.13, rare = 'TRUE')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
library(sensitivitymw)
library(sensitivitymw)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
library(sensitivitymw)
data(erpcp)
head(erpcp)
senmw(erpcp, gamma = 1, method = 't')$pval
senmwCI(erpcp, gamma = 1, method = 't', one.sided = TRUE)
gamma_vals <- seq(from = 1., to = 5.0, by = 0.4)
sensitivity_output <- data.frame('gamma' = gamma_vals,
'p-value' = NA,
'CI.L' = NA,
'CI.U' = NA)
for(i in 1:length(gamma_vals)){
gamma_val <- gamma_vals[i]
sensitivity_output[i,2] <- senmw(erpcp,
gamma = gamma_val,
method = 't')$pval
sensitivity_output[i,3:4] <- senmwCI(erpcp,
gamma = gamma_val,
method = 't')$Confidence.Interval
}
library(kableExtra)
sensitivity_output |>
kable()
library(sensitivitymv)
Delta_seq <- c(5:15)
Lambda_seq <- sapply(Delta_seq,  function(x) amplify(3.8, x))
plot(Lambda_seq,
Delta_seq,
pch = 20,
main = 'Amplification of Gamma = 3.8',
xlab = 'Lambda',
ylab = 'Delta',
xlim = c(0,15),
yli = c(0,15))
abline(h = 3.8, lty = 'dotted')
abline(v = 3.8, lty = 'dotted')
amplify(3.8,7)
head(tbmetaphase)
gamma_vals <- seq(from = 1, to = 4.0, by = 0.2)
sensitivity_output <- data.frame('gamma' = gamma_vals,
'p-value' = NA)
for(i in 1:length(gamma_vals)){
gamma_val <- gamma_vals[i]
sensitivity_output[i,2] <- senmv(tbmetaphase,
gamma = gamma_val,
method = 't', TonT = TRUE)$pval
}
sensitivity_output |>
kable()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
library(CrossScreening)
library(CrossScreening)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
rm(list = ls())
embed_png <- function(path, dpi = NULL) {
meta <- attr(png::readPNG(path, native = TRUE, info = TRUE), "info")
if (!is.null(dpi)) meta$dpi <- rep(dpi, 2)
knitr::asis_output(paste0(
"<img src='", path, "'",
" width=", round(meta$dim[1] / (meta$dpi[1] / 96)),
" height=", round(meta$dim[2] / (meta$dpi[2] / 96)),
" style='display: block; margin: auto;'/>"
))
}
# loads package
library(sensemakr)
# loads data
data("darfur")
# runs regression model
darfur.model <- lm(peacefactor ~ directlyharmed  + village +  female +
age + farmer_dar + herder_dar + pastvoted + hhsize_darfur,
data = darfur)
stargazer::stargazer(darfur.model, keep = "directlyharmed", type = "text")
# runs sensemakr for sensitivity analysis
# in the darfur example
darfur.sensitivity <- sensemakr(model = darfur.model,
treatment = "directlyharmed",
benchmark_covariates = "female",
kd = 1:3,
ky = 1:3,
q = 1,
alpha = 0.05,
reduce = TRUE)
darfur.sensitivity <- sensemakr(model = darfur.model,
treatment = "directlyharmed",
benchmark_covariates = "female",
kd = 1:3)
darfur.sensitivity
ovb_minimal_reporting(darfur.sensitivity, format = "html")
summary(darfur.sensitivity)
plot(darfur.sensitivity)
plot(darfur.sensitivity, sensitivity.of = "t-value")
plot(darfur.sensitivity, type = "extreme")
# loads sensemakr package
# simulates data
n <- 100
X <- scale(rnorm(n))
Z <- resid_maker(n, X)
D <- X + Z + resid_maker(n, cbind(X, Z))
Y <- X + Z + resid_maker(n, cbind(X, Z, D))
model.ydx <- lm(Y ~ D + X)
summary(model.ydx)
# fits treatment regression
model.dx <- lm(D ~ X)
# computes observed partial R2 of X
r2yx.d <- partial_r2(model.ydx, covariates = "X")
r2dx   <- partial_r2(model.dx, covariates = "X")
informal_adjusted_estimate <- adjusted_estimate(model.ydx,
treatment = "D",
r2dz.x = r2dx,
r2yz.dx = r2yx.d)
# draws sensitivity contours
ovb_contour_plot(model.ydx,
treatment = "D",
lim = .6)
# adds informal benchmark
add_bound_to_contour(r2dz.x = r2dx,
r2yz.dx = r2yx.d,
bound_value = informal_adjusted_estimate,
bound_label = "Informal benchmark")
# compute formal bounds
formal_bound <- ovb_bounds(model = model.ydx,
treatment = "D",
benchmark_covariates = "X",
kd = 1, ky = 1)
# contour plot
ovb_contour_plot(model.ydx,
treatment = "D",
lim = .6)
add_bound_to_contour(r2dz.x = r2dx,
r2yz.dx = r2yx.d,
bound_value = informal_adjusted_estimate,
bound_label = "Informal benchmark")
add_bound_to_contour(bounds = formal_bound,
bound_label = "Proper bound")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
library(sensitivitymw)
data(erpcp)
head(erpcp)
senmw(erpcp, gamma = 1, method = 't')$pval
senmwCI(erpcp, gamma = 1, method = 't', one.sided = TRUE)
gamma_vals <- seq(from = 1., to = 5.0, by = 0.4)
sensitivity_output <- data.frame('gamma' = gamma_vals,
'p-value' = NA,
'CI.L' = NA,
'CI.U' = NA)
for(i in 1:length(gamma_vals)){
gamma_val <- gamma_vals[i]
sensitivity_output[i,2] <- senmw(erpcp,
gamma = gamma_val,
method = 't')$pval
sensitivity_output[i,3:4] <- senmwCI(erpcp,
gamma = gamma_val,
method = 't')$Confidence.Interval
}
library(kableExtra)
sensitivity_output |>
kable()
library(sensitivitymv)
Delta_seq <- c(5:15)
Lambda_seq <- sapply(Delta_seq,  function(x) amplify(3.8, x))
plot(Lambda_seq,
Delta_seq,
pch = 20,
main = 'Amplification of Gamma = 3.8',
xlab = 'Lambda',
ylab = 'Delta',
xlim = c(0,15),
yli = c(0,15))
abline(h = 3.8, lty = 'dotted')
abline(v = 3.8, lty = 'dotted')
amplify(3.8,7)
head(tbmetaphase)
gamma_vals <- seq(from = 1, to = 4.0, by = 0.2)
sensitivity_output <- data.frame('gamma' = gamma_vals,
'p-value' = NA)
for(i in 1:length(gamma_vals)){
gamma_val <- gamma_vals[i]
sensitivity_output[i,2] <- senmv(tbmetaphase,
gamma = gamma_val,
method = 't', TonT = TRUE)$pval
}
sensitivity_output |>
kable()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
# Chunk 2
library(sensitivitymw)
data(erpcp)
head(erpcp)
senmw(erpcp, gamma = 1, method = 't')$pval
# Chunk 3
senmwCI(erpcp, gamma = 1, method = 't', one.sided = TRUE)
# Chunk 4
gamma_vals <- seq(from = 1., to = 5.0, by = 0.4)
sensitivity_output <- data.frame('gamma' = gamma_vals,
'p-value' = NA,
'CI.L' = NA,
'CI.U' = NA)
for(i in 1:length(gamma_vals)){
gamma_val <- gamma_vals[i]
sensitivity_output[i,2] <- senmw(erpcp,
gamma = gamma_val,
method = 't')$pval
sensitivity_output[i,3:4] <- senmwCI(erpcp,
gamma = gamma_val,
method = 't')$Confidence.Interval
}
library(kableExtra)
sensitivity_output |>
kable()
# Chunk 5
library(sensitivitymv)
Delta_seq <- c(5:15)
Lambda_seq <- sapply(Delta_seq,  function(x) amplify(3.8, x))
plot(Lambda_seq,
Delta_seq,
pch = 20,
main = 'Amplification of Gamma = 3.8',
xlab = 'Lambda',
ylab = 'Delta',
xlim = c(0,15),
yli = c(0,15))
abline(h = 3.8, lty = 'dotted')
abline(v = 3.8, lty = 'dotted')
amplify(3.8,7)
# Chunk 6
head(tbmetaphase)
# Chunk 7
gamma_vals <- seq(from = 1, to = 4.0, by = 0.2)
sensitivity_output <- data.frame('gamma' = gamma_vals,
'p-value' = NA)
for(i in 1:length(gamma_vals)){
gamma_val <- gamma_vals[i]
sensitivity_output[i,2] <- senmv(tbmetaphase,
gamma = gamma_val,
method = 't', TonT = TRUE)$pval
}
sensitivity_output |>
kable()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
class.output = "output",
class.message = "message"
)
# Chunk 2
rm(list = ls())
embed_png <- function(path, dpi = NULL) {
meta <- attr(png::readPNG(path, native = TRUE, info = TRUE), "info")
if (!is.null(dpi)) meta$dpi <- rep(dpi, 2)
knitr::asis_output(paste0(
"<img src='", path, "'",
" width=", round(meta$dim[1] / (meta$dpi[1] / 96)),
" height=", round(meta$dim[2] / (meta$dpi[2] / 96)),
" style='display: block; margin: auto;'/>"
))
}
# Chunk 3
# loads package
library(sensemakr)
# loads data
data("darfur")
# Chunk 4
# runs regression model
darfur.model <- lm(peacefactor ~ directlyharmed  + village +  female +
age + farmer_dar + herder_dar + pastvoted + hhsize_darfur,
data = darfur)
# Chunk 5
stargazer::stargazer(darfur.model, keep = "directlyharmed", type = "text")
# Chunk 7
# runs sensemakr for sensitivity analysis
# in the darfur example
darfur.sensitivity <- sensemakr(model = darfur.model,
treatment = "directlyharmed",
benchmark_covariates = "female",
kd = 1:3,
ky = 1:3,
q = 1,
alpha = 0.05,
reduce = TRUE)
# Chunk 8
darfur.sensitivity <- sensemakr(model = darfur.model,
treatment = "directlyharmed",
benchmark_covariates = "female",
kd = 1:3)
# Chunk 9
darfur.sensitivity
# Chunk 10
ovb_minimal_reporting(darfur.sensitivity, format = "html")
# Chunk 11
summary(darfur.sensitivity)
# Chunk 12
plot(darfur.sensitivity)
# Chunk 13
plot(darfur.sensitivity, sensitivity.of = "t-value")
# Chunk 14
plot(darfur.sensitivity, type = "extreme")
# Chunk 15
# loads sensemakr package
# simulates data
n <- 100
X <- scale(rnorm(n))
Z <- resid_maker(n, X)
D <- X + Z + resid_maker(n, cbind(X, Z))
Y <- X + Z + resid_maker(n, cbind(X, Z, D))
# Chunk 16
model.ydx <- lm(Y ~ D + X)
summary(model.ydx)
# Chunk 17
# fits treatment regression
model.dx <- lm(D ~ X)
# computes observed partial R2 of X
r2yx.d <- partial_r2(model.ydx, covariates = "X")
r2dx   <- partial_r2(model.dx, covariates = "X")
# Chunk 18
informal_adjusted_estimate <- adjusted_estimate(model.ydx,
treatment = "D",
r2dz.x = r2dx,
r2yz.dx = r2yx.d)
# Chunk 19
# draws sensitivity contours
ovb_contour_plot(model.ydx,
treatment = "D",
lim = .6)
# adds informal benchmark
add_bound_to_contour(r2dz.x = r2dx,
r2yz.dx = r2yx.d,
bound_value = informal_adjusted_estimate,
bound_label = "Informal benchmark")
# Chunk 20
# compute formal bounds
formal_bound <- ovb_bounds(model = model.ydx,
treatment = "D",
benchmark_covariates = "X",
kd = 1, ky = 1)
# Chunk 21
# contour plot
ovb_contour_plot(model.ydx,
treatment = "D",
lim = .6)
add_bound_to_contour(r2dz.x = r2dx,
r2yz.dx = r2yx.d,
bound_value = informal_adjusted_estimate,
bound_label = "Informal benchmark")
add_bound_to_contour(bounds = formal_bound,
bound_label = "Proper bound")
library(tidyverse)
library(tidyr)
library(vroom)
library(dplyr)
library(skimr)
library(dataex)
library(tidyverse)
library(tidyr)
library(vroom)
library(ggplot2)
library(patchwork)
train_data <- vroom("data/train.csv")
plot1 <- ggplot(data = train_data ,aes(x = atemp ,y = count)) +
geom_point() +
geom_smooth() +
labs (
title = "Count Across Temperature"
,x = "Feels Like Temperature (C)"
,y = "Count"
)
#Load Data to df
train_data <- vroom("data/train.csv")
setwd("~/Library/CloudStorage/OneDrive-BrighamYoungUniversity/STAT 348/Repos/BikeShare")
#Load Data to df
train_data <- vroom("data/train.csv")
##Count by temp
plot1 <- ggplot(data = train_data ,aes(x = atemp ,y = count)) +
geom_point() +
geom_smooth() +
labs (
title = "Count Across Temperature"
,x = "Feels Like Temperature (C)"
,y = "Count"
)
#Count by weather type
plot2 <- ggplot(train_data ,aes(x = factor(weather) ,y =  count)) +
geom_col(fill = "darkblue") +
labs (
title = "Distribution of Counts by Weather Type"
,x = "Weather Type"
,y = "Count of Bike Shares"
) +
scale_x_discrete(
labels = c(
"1" = "Clear / Few clouds",
"2" = "Misty / Cloudy",
"3" = "Light Snow / Light Rain",
"4" = "Heavy Rain / Snow"
))
##Counts by day of week
train_data_by_dayoweek <- train_data %>%
mutate(weekday = wday(datetime, label = TRUE, abbr = TRUE)) %>%
group_by(weekday) %>%
summarise(mean_count = mean(count))
plot3 <- ggplot(train_data_by_dayoweek ,aes(x = weekday ,y = mean_count)) +
geom_bar(stat = "identity") +
labs (
title = "Count of Bike Shares by Day of Week"
,x = "Day of Week"
,y = "Mean Count of Bike Share"
)
##Count by hour of day
plot4 <- ggplot(data = train_data ,aes(x = hour(datetime) ,y = count)) +
geom_histogram(stat = "identity") +
labs(
title = "Count by Hour of Day"
,x = "Hour (0-24)"
,y = "Count of Bike Shares"
)
#create 4 panel plot
(plot1 + plot2) / (plot2 + plot4)
(plot1 + plot2) / (plot3 + plot4)
